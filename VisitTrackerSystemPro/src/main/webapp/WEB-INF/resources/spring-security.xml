<?xml version="1.0" encoding="UTF-8"?>
	<beans:beans xmlns="http://www.springframework.org/schema/security"
		xmlns:beans="http://www.springframework.org/schema/beans" 
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xsi:schemaLocation="http://www.springframework.org/schema/beans 
					http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
    				http://www.springframework.org/schema/security
    				http://www.springframework.org/schema/security/spring-security-4.0.xsd">

		<!-- This is where we configure Spring-Security -->
		<http auto-config="true" use-expressions="true"> <!-- access-denied-page="/auth/denied.do" -->

			<!-- -->
			<intercept-url pattern="/auth/login*" access="permitAll" />
			<intercept-url pattern="/admin/*" access="hasRole('ROLE_ADMIN')" />
			<intercept-url pattern="/security/*" access="hasRole('ROLE_SECURITY')" />
			<intercept-url pattern="/employee/*" access="hasRole('ROLE_USER')" />
			<intercept-url pattern="/home*" access="hasAnyRole('ROLE_USER', 'ROLE_SECURITY', 'ROLE_ADMIN')" />
			<intercept-url pattern="/auth/changepassword*" access="hasAnyRole('ROLE_USER', 'ROLE_SECURITY', 'ROLE_ADMIN')" />
			<intercept-url pattern="/auth/forgotpassword*" access="permitAll" />

			<form-login login-page="/auth/login.do"
				authentication-failure-url="/auth/login.do?error=true"
				default-target-url="/home.do" />
			<!-- authentication-success-handler-ref="redirectRoleStrategy" /> -->

			<logout invalidate-session="true" logout-success-url="/auth/login.do" logout-url="/auth/logout.do" />

		</http>

		<!-- Declare an authentication-manager to use a custom userDetailsService -->
		<authentication-manager>
			<authentication-provider user-service-ref="customUserDetailsService">
				<password-encoder ref="passwordEncoder" />
			</authentication-provider>
		</authentication-manager>

		<!-- A custom service where Spring will retrieve users and their corresponding access levels -->
		<beans:bean id="customUserDetailsService" class="com.sparsh.tracker.visit.authorization.CustomUserDetailsService" />
		
		<!-- Use a Md5 encoder since the user's passwords are stored as Md5 in the database -->
		<beans:bean id="passwordEncoder" class="org.springframework.security.authentication.encoding.Md5PasswordEncoder" />

		<!-- <bean id="redirectRoleStrategy" class="com.sparsh.tracker.visit.authorization.RoleBasedAuthenticationSuccessHandler"> 
			<property name="roleUrlMap"> <map> <entry key="ROLE_SECURITY" value="/home/security.do" 
			/> <entry key="ROLE_ADMIN" value="/home/admin.do" /> <entry key="ROLE_USER" 
			value="/home/user.do" /> </map> </property> </bean> -->
</beans:beans>